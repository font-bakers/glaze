{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the glaze documentation, and happy baking! How to read this documentation I have algorithmically-generated glyphs, and want to render them. Check out the quickstart for installation and usage instructions. I want to contribute to glaze . Check out the contributing guide for details on how to make a contribution.","title":"Home"},{"location":"#how-to-read-this-documentation","text":"I have algorithmically-generated glyphs, and want to render them. Check out the quickstart for installation and usage instructions. I want to contribute to glaze . Check out the contributing guide for details on how to make a contribution.","title":"How to read this documentation"},{"location":"contributing/","text":"Contributing Guide Happy baking! Set up development environment git clone https://github.com/font-bakers/glaze.git cd glaze/ make develop source venv/bin/activate # Do your work... deactivate Before committing make check This will both lint the glaze/ directory (with black and pylint ), and run test scripts. You may lint and test separately with make lint and make test , respectively. Make sure that all checks pass before committing: you should get several blue success messages as each check passes. Note that glaze uses a pre-commit git hook to format staged Python files in-place using black . Packaging and releasing glaze First, ensure that the version number has been bumped appropriately: glaze adopts the Semantic Versioning 2.0.0 specification. This can be done either by running bumpversion --current-version CURRENT_VERSION PART glaze/__init__.py or by directly editing the __version__ variable in glaze/__init__.py (the latter method is simpler and recommended for such a simple project as glaze ). For more information, see the bumpversion documentation . Then, run make package . It will package glaze and validate the resulting source archive and built distribution . Finally, upload the source archive and build distribution to PyPI. You will be asked for a username and password for PyPI. twine upload dist/* For more information, refer to the Python packaging documentation . Miscellaneous development details glaze adopts the Semantic Versioning 2.0.0 specification. glaze targets Python 3.5+ (specifically, 3.5.2+) compatibility. glaze uses black and pylint to format and lint code, respectively. However, black requires Python 3.6+ to run. Thus, we test in Python 3.5 but lint in Python 3.6. See our Travis configuration for more details. glaze is unit tested through pytest , and integration tested through the test_cli.sh script . The glaze documentation is generated using mkdocs . See the mkdocs.yml configuration for more details.","title":"Contributing"},{"location":"contributing/#contributing-guide","text":"Happy baking!","title":"Contributing Guide"},{"location":"contributing/#set-up-development-environment","text":"git clone https://github.com/font-bakers/glaze.git cd glaze/ make develop source venv/bin/activate # Do your work... deactivate","title":"Set up development environment"},{"location":"contributing/#before-committing","text":"make check This will both lint the glaze/ directory (with black and pylint ), and run test scripts. You may lint and test separately with make lint and make test , respectively. Make sure that all checks pass before committing: you should get several blue success messages as each check passes. Note that glaze uses a pre-commit git hook to format staged Python files in-place using black .","title":"Before committing"},{"location":"contributing/#packaging-and-releasing-glaze","text":"First, ensure that the version number has been bumped appropriately: glaze adopts the Semantic Versioning 2.0.0 specification. This can be done either by running bumpversion --current-version CURRENT_VERSION PART glaze/__init__.py or by directly editing the __version__ variable in glaze/__init__.py (the latter method is simpler and recommended for such a simple project as glaze ). For more information, see the bumpversion documentation . Then, run make package . It will package glaze and validate the resulting source archive and built distribution . Finally, upload the source archive and build distribution to PyPI. You will be asked for a username and password for PyPI. twine upload dist/* For more information, refer to the Python packaging documentation .","title":"Packaging and releasing glaze"},{"location":"contributing/#miscellaneous-development-details","text":"glaze adopts the Semantic Versioning 2.0.0 specification. glaze targets Python 3.5+ (specifically, 3.5.2+) compatibility. glaze uses black and pylint to format and lint code, respectively. However, black requires Python 3.6+ to run. Thus, we test in Python 3.5 but lint in Python 3.6. See our Travis configuration for more details. glaze is unit tested through pytest , and integration tested through the test_cli.sh script . The glaze documentation is generated using mkdocs . See the mkdocs.yml configuration for more details.","title":"Miscellaneous development details"},{"location":"quickstart/","text":"Quickstart Installation The latest release of glaze can be installed from PyPI: pip install glaze The bleeding edge development branch of glaze can be installed from GitHub: pip install git+https://github.com/font-bakers/glaze.git Usage In Python >>> import matplotlib.pyplot as plt >>> from glaze import read_json, render >>> >>> font = read_json(\"data/Georgia.json\") # Returns a list of 3-tuples >>> font_name, glyph_name, glyph = font[0] >>> render(glyph) # Renders one glyph >>> plt.show() For more information, see the docstrings for the read_json function and the render function . (Note that while glaze does contain other modules and functions, the only things of any practical value are the render and read_json functions). On the command line # Recommended usage glaze --directory PATH/TO/DATA/ # Alternative usage glaze --files FILES The --directory must have the following structure: bash data \u251c\u2500\u2500 json \u2502 \u251c\u2500\u2500 Georgia.json \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 ... where the .json files are those produced by knead . Renders will be saved in a directory data/renders-TTTT-DD-MM/ , where TTTT is military time. In other words, --directory is not the directory containing the .json files. It is a directory that contains a subdirectory (called json ) containing the .json files. Using this flag is the recommended way to use glaze , as it preserves the same data model that knead does. That is, each directory contains only subdirectories with the same data in various different data formats. In this way, each directory can be semantically associated with a single data set, irrespective of its data format. However, should you want to render only a few files, you can use the --files flag, which must be one of: a path to a .json file (again, such as those produced by knead ), a comma-separated list of such paths, or a regex matching the path(s) to one or more .json files. Renders will be saved in the present working directory (unless the --output flag is passed). For more information on optional flags, refer to the section below . In the event of a fatal error during rendering, glaze will simply catch the exception and write the error message (along with a stack trace) to a glaze.log file. Optional Flags --output : Path to the desired location of the output renders. Defaults to the present working directory. Only used if --files is passed. --num_points : Number of points to sample per Bezier curve. Defaults to 32. --lim : x and y limits of the rendered glyph. This flags is passed as comma-separated values, e.g. glaze --input MyFont.json --lim -0.2,1.3 . Defaults to [-0.3, 1.2]. --grid : If True, overlays the axes and gridlines on the rendered glyph. Defaults to False.","title":"Quickstart"},{"location":"quickstart/#quickstart","text":"","title":"Quickstart"},{"location":"quickstart/#installation","text":"The latest release of glaze can be installed from PyPI: pip install glaze The bleeding edge development branch of glaze can be installed from GitHub: pip install git+https://github.com/font-bakers/glaze.git","title":"Installation"},{"location":"quickstart/#usage","text":"","title":"Usage"},{"location":"quickstart/#in-python","text":">>> import matplotlib.pyplot as plt >>> from glaze import read_json, render >>> >>> font = read_json(\"data/Georgia.json\") # Returns a list of 3-tuples >>> font_name, glyph_name, glyph = font[0] >>> render(glyph) # Renders one glyph >>> plt.show() For more information, see the docstrings for the read_json function and the render function . (Note that while glaze does contain other modules and functions, the only things of any practical value are the render and read_json functions).","title":"In Python"},{"location":"quickstart/#on-the-command-line","text":"# Recommended usage glaze --directory PATH/TO/DATA/ # Alternative usage glaze --files FILES The --directory must have the following structure: bash data \u251c\u2500\u2500 json \u2502 \u251c\u2500\u2500 Georgia.json \u2502 \u2514\u2500\u2500 ... \u2514\u2500\u2500 ... where the .json files are those produced by knead . Renders will be saved in a directory data/renders-TTTT-DD-MM/ , where TTTT is military time. In other words, --directory is not the directory containing the .json files. It is a directory that contains a subdirectory (called json ) containing the .json files. Using this flag is the recommended way to use glaze , as it preserves the same data model that knead does. That is, each directory contains only subdirectories with the same data in various different data formats. In this way, each directory can be semantically associated with a single data set, irrespective of its data format. However, should you want to render only a few files, you can use the --files flag, which must be one of: a path to a .json file (again, such as those produced by knead ), a comma-separated list of such paths, or a regex matching the path(s) to one or more .json files. Renders will be saved in the present working directory (unless the --output flag is passed). For more information on optional flags, refer to the section below . In the event of a fatal error during rendering, glaze will simply catch the exception and write the error message (along with a stack trace) to a glaze.log file.","title":"On the command line"},{"location":"quickstart/#optional-flags","text":"--output : Path to the desired location of the output renders. Defaults to the present working directory. Only used if --files is passed. --num_points : Number of points to sample per Bezier curve. Defaults to 32. --lim : x and y limits of the rendered glyph. This flags is passed as comma-separated values, e.g. glaze --input MyFont.json --lim -0.2,1.3 . Defaults to [-0.3, 1.2]. --grid : If True, overlays the axes and gridlines on the rendered glyph. Defaults to False.","title":"Optional Flags"}]}